const test = require('tape');

const lip = require('../dist').default;
const { BrahmicScripts, BrahmicScript, RomanScripts, Scripts, Script } = require('../dist/enum');
const { s } = require('../dist/scripts/utils');


const DATA = {
    [Script.BENGALI]: {
        vowels: 'ржЕ ржЖ ржЗ ржИ ржЙ ржК ржЛ рза ржМ рзб ржП ржР ржУ ржФ',
        marks: 'ржХ ржЦрж╛ ржЧрж┐ ржШрзА ржЩрзБ ржЪрзВ ржЫрзГ ржЬрзД ржЭрзв ржЮрзг ржЯрзЗ ржарзИ ржбрзЛ ржврзМ ржгржВ рждржГ ржерзН',
        consonants: `ржХ ржЦ ржЧ ржШ ржЩ ржЪ ржЫ ржЬ ржЭ ржЮ ржЯ ржа ржб ржв ржг ржд рже ржж ржз ржи ржк ржл ржм ржн ржо
        ржп рж░ рж▓ ржм рж╢ рж╖ рж╕ рж╣ рд│`,
        symbols: 'реР ред рее рзж рзз рзи рзй рзк рзл рзм рзн рзо рзп',
        putra: 'ржкрзБрждрзНрж░',
        naraIti: 'ржирж░ ржЗрждрж┐',
        sentence: 'ржзрж░рзНржоржХрзНрж╖рзЗрждрзНрж░рзЗ ржХрзБрж░рзБржХрзНрж╖рзЗрждрзНрж░рзЗ рж╕ржоржмрзЗрждрж╛ ржпрзБржпрзБрждрзНрж╕ржмржГ ред',
    },

    [Script.DEVANAGARI]: {
        vowels: 'рдЕ рдЖ рдЗ рдИ рдЙ рдК рдЛ реа рдМ реб рдП рдР рдУ рдФ',
        marks: 'рдХ рдЦрд╛ рдЧрд┐ рдШреА рдЩреБ рдЪреВ рдЫреГ рдЬреД рдЭрев рдЮрег рдЯреЗ рдареИ рдбреЛ рдвреМ рдгрдВ рддрдГ рдереН',
        consonants: `рдХ рдЦ рдЧ рдШ рдЩ рдЪ рдЫ рдЬ рдЭ рдЮ рдЯ рда рдб рдв рдг рдд рде рдж рдз рди рдк рдл рдм рдн рдо
        рдп рд░ рд▓ рд╡ рд╢ рд╖ рд╕ рд╣ рд│`,
        symbols: 'реР ред рее реж рез реи рей рек рел рем рен рео реп',
        putra: 'рдкреБрддреНрд░',
        naraIti: 'рдирд░ рдЗрддрд┐',
        sentence: 'рдзрд░реНрдордХреНрд╖реЗрддреНрд░реЗ рдХреБрд░реБрдХреНрд╖реЗрддреНрд░реЗ рд╕рдорд╡реЗрддрд╛ рдпреБрдпреБрддреНрд╕рд╡рдГ ред',
    },

    [Script.GUJARATI]: {
        vowels: 'ркЕ ркЖ ркЗ ркИ ркЙ ркК ркЛ рла ркМ рлб ркП ркР ркУ ркФ',
        marks: 'ркХ ркЦрк╛ ркЧрк┐ ркШрлА ркЩрлБ ркЪрлВ ркЫрлГ ркЬрлД ркЭрлв ркЮрлг ркЯрлЗ ркарлИ ркбрлЛ ркврлМ ркгркВ ркдркГ ркерлН',
        consonants: `ркХ ркЦ ркЧ ркШ ркЩ ркЪ ркЫ ркЬ ркЭ ркЮ ркЯ рка ркб ркв ркг ркд рке ркж ркз рки ркк ркл ркм ркн рко
        ркп рк░ рк▓ рк╡ рк╢ рк╖ рк╕ рк╣ рк│`,
        symbols: 'рлР ред рее рлж рлз рли рлй рлк рлл рлм рлн рло рлп',
        putra: 'рккрлБркдрлНрк░',
        naraIti: 'ркирк░ ркЗркдрк┐',
        sentence: 'ркзрк░рлНркоркХрлНрк╖рлЗркдрлНрк░рлЗ ркХрлБрк░рлБркХрлНрк╖рлЗркдрлНрк░рлЗ рк╕ркорк╡рлЗркдрк╛ ркпрлБркпрлБркдрлНрк╕рк╡ркГ ред',
    },

    [Script.TITUS]: {
        vowels: 'a ─Б i ─л u ┼л r╠е r╠е╠Д l╠е l╠е╠Д e ai o au',
        marks: 'ka k╩░─Б gi g╩░─л с╣Еu c┼л c╩░r╠е jr╠е╠Д j╩░l╠е ├▒l╠е╠Д с╣нe с╣н╩░ai с╕Нo с╕Н╩░au с╣Зaс╣Г taс╕е t╩░',
        consonants: `ka k╩░a ga g╩░a с╣Еa ca c╩░a ja j╩░a ├▒a с╣нa с╣н╩░a с╕Нa с╕Н╩░a с╣Зa ta t╩░a da d╩░a na pa p╩░a ba b╩░a ma
        ya ra la va ┼Ыa с╣гa sa ha с╕╖a`,
        symbols: 'oс╣Г . .. 0 1 2 3 4 5 6 7 8 9',
        putra: 'putra',
        naraIti: 'nara iti',
        sentence: 'd╩░armakс╣гetre kurukс╣гetre samavet─Б yuyutsavaс╕е .',
    },

    [Script.HK]: {
        vowels: 'a A i I u U R RR lR lRR e ai o au',
        marks: `ka khA gi ghI Gu cU chR jRR jhlR JlRR Te Thai Do Dhau
        NaM taH th`,
        consonants: `ka kha ga gha Ga ca cha ja jha Ja Ta Tha Da Dha Na
        ta tha da dha na pa pha ba bha ma
        ya ra la va za Sa sa ha La`,
        symbols: 'OM | || 0 1 2 3 4 5 6 7 8 9',
        putra: 'putra',
        naraIti: 'nara iti',
        sentence: 'dharmakSetre kurukSetre samavetA yuyutsavaH |',
    },

    [Script.ITRANS]: {
        vowels: 'a A i I u U RRi RRI LLi LLI e ai o au',
        marks: `ka khA gi ghI ~Nu chU ChRRi jRRI jhLLi ~nLLI Te Thai Do Dhau
        NaM taH th`,
        consonants: `ka kha ga gha ~Na cha Cha ja jha ~na Ta Tha Da Dha Na
        ta tha da dha na pa pha ba bha ma
        ya ra la va sha Sha sa ha La`,
        symbols: 'OM | || 0 1 2 3 4 5 6 7 8 9',
        putra: 'putra',
        naraIti: 'nara iti',
        sentence: 'dharmakShetre kurukShetre samavetA yuyutsavaH |',
    },

    [Script.VELTHUIS]: {
        vowels: 'a aa i ii u uu .r .rr .l .ll e ai o au',
        marks: `ka khaa gi ghii "nu cuu ch.r j.rr jh.l ~n.ll.te.thai.do.dhau
                .na.m ta.h th`,
        consonants: `ka kha ga gha "na ca cha ja jha ~na.ta.tha.da.dha.na
        ta tha da dha na pa pha ba bha ma
        ya ra la va "sa .sa sa ha La`,
        symbols: 'O | || 0 1 2 3 4 5 6 7 8 9',
        putra: 'putra',
        naraIti: 'nara iti',
        sentence: 'dharmak.setre kuruk.setre samavetaa yuyutsava.h |',
    },

    [Script.IAST]: {
        vowels: 'a ─Б i ─л u ┼л с╣Ы с╣Э с╕╖ с╕╣ e ai o au',
        marks: 'ka kh─Б gi gh─л с╣Еu c┼л chс╣Ы jс╣Э jhс╕╖ ├▒с╕╣ с╣нe с╣нhai с╕Нo с╕Нhau с╣Зaс╣Г taс╕е th',
        consonants: `ka kha ga gha с╣Еa ca cha ja jha ├▒a с╣нa с╣нha с╕Нa с╕Нha с╣Зa
        ta tha da dha na pa pha ba bha ma
        ya ra la va ┼Ыa с╣гa sa ha с╕╗a`,
        symbols: 'oс╣Г | || 0 1 2 3 4 5 6 7 8 9',
        putra: 'putra',
        naraIti: 'nara iti',
        sentence: 'dharmakс╣гetre kurukс╣гetre samavet─Б yuyutsavaс╕е |',
    },

    [Script.KOLKATA]: {
        vowels: 'a ─Б i ─л u ┼л с╣Ы с╣Э с╕╖ с╕╣ ─У ai ┼Н au',
        marks: 'ka kh─Б gi gh─л с╣Еu c┼л chс╣Ы jс╣Э jhс╕╖ ├▒с╕╣ с╣н─У с╣нhai с╕Н┼Н с╕Нhau с╣Зaс╣Г taс╕е th',
        consonants: `ka kha ga gha с╣Еa ca cha ja jha ├▒a с╣нa с╣нha с╕Нa с╕Нha с╣Зa
        ta tha da dha na pa pha ba bha ma
        ya ra la va ┼Ыa с╣гa sa ha с╕╗a`,
        symbols: 'oс╣Г | || 0 1 2 3 4 5 6 7 8 9',
        putra: 'putra',
        naraIti: 'nara iti',
        sentence: 'dharmakс╣г─Уtr─У kurukс╣г─Уtr─У samav─Уt─Б yuyutsavaс╕е |',
    },

    [Script.KANNADA]: {
        vowels: 'р▓Е р▓Ж р▓З р▓И р▓Й р▓К р▓Л р│а р▓М р│б р▓П р▓Р р▓У р▓Ф',
        marks: 'р▓Х р▓Цр▓╛ р▓Чр▓┐ р▓Шр│А р▓Щр│Б р▓Ър│В р▓Ыр│Г р▓Ьр│Д р▓Эр│в р▓Юр│г р▓Яр│З р▓ар│И р▓бр│Л р▓вр│М р▓гр▓В р▓др▓Г р▓ер│Н',
        consonants: `р▓Х р▓Ц р▓Ч р▓Ш р▓Щ р▓Ъ р▓Ы р▓Ь р▓Э р▓Ю р▓Я р▓а р▓б р▓в р▓г р▓д р▓е р▓ж р▓з р▓и р▓к р▓л р▓м р▓н р▓о
        р▓п р▓░ р▓▓ р▓╡ р▓╢ р▓╖ р▓╕ р▓╣ р▓│`,
        symbols: 'р▓Ур▓В ред рее р│ж р│з р│и р│й р│к р│л р│м р│н р│о р│п',
        putra: 'р▓кр│Бр▓др│Нр▓░',
        naraIti: 'р▓ир▓░ р▓Зр▓др▓┐',
        sentence: 'р▓зр▓░р│Нр▓ор▓Хр│Нр▓╖р│Зр▓др│Нр▓░р│З р▓Хр│Бр▓░р│Бр▓Хр│Нр▓╖р│Зр▓др│Нр▓░р│З р▓╕р▓ор▓╡р│Зр▓др▓╛ р▓пр│Бр▓пр│Бр▓др│Нр▓╕р▓╡р▓Г ред',
    },

    [Script.MALAYALAM]: {
        vowels: 'р┤Е р┤Ж р┤З р┤И р┤Й р┤К р┤Л р╡а р┤М р╡б р┤П р┤Р р┤У р┤Ф',
        marks: 'р┤Х р┤Цр┤╛ р┤Чр┤┐ р┤Шр╡А р┤Щр╡Б р┤Ър╡В р┤Ыр╡Г р┤Ьр╡Д р┤Эр╡в р┤Юр╡г р┤Яр╡З р┤ар╡И р┤бр╡Л р┤вр╡М р┤гр┤В р┤др┤Г р┤ер╡Н',
        consonants: `р┤Х р┤Ц р┤Ч р┤Ш р┤Щ р┤Ъ р┤Ы р┤Ь р┤Э р┤Ю р┤Я р┤а р┤б р┤в р┤г р┤д р┤е р┤ж р┤з р┤и р┤к р┤л р┤м р┤н р┤о
        р┤п р┤░ р┤▓ р┤╡ р┤╢ р┤╖ р┤╕ р┤╣ р┤│`,
        symbols: 'р┤Ур┤В ред рее р╡ж р╡з р╡и р╡й р╡к р╡л р╡м р╡н р╡о р╡п',
        putra: 'р┤кр╡Бр┤др╡Нр┤░',
        naraIti: 'р┤ир┤░ р┤Зр┤др┤┐',
        sentence: 'р┤зр┤░р╡Нр┤ор┤Хр╡Нр┤╖р╡Зр┤др╡Нр┤░р╡З р┤Хр╡Бр┤░р╡Бр┤Хр╡Нр┤╖р╡Зр┤др╡Нр┤░р╡З р┤╕р┤ор┤╡р╡Зр┤др┤╛ р┤пр╡Бр┤пр╡Бр┤др╡Нр┤╕р┤╡р┤Г ред',
    },

    [Script.SLP1]: {
        vowels: 'a A i I u U f F x X e E o O',
        marks: 'ka KA gi GI Nu cU Cf jF Jx YX we WE qo QO RaM taH T',
        consonants: `ka Ka ga Ga Na ca Ca ja Ja Ya wa Wa qa Qa Ra
        ta Ta da Da na pa Pa ba Ba ma
        ya ra la va Sa za sa ha La`,
        symbols: 'oM . .. 0 1 2 3 4 5 6 7 8 9',
        putra: 'putra',
        naraIti: 'nara iti',
        sentence: 'Darmakzetre kurukzetre samavetA yuyutsavaH .',
    },

    [Script.WX]: {
        vowels: 'a A i I u U q Q L с╕╣ e E o O',
        marks: 'ka KA gi GI fu cU Cq jQ JL Fс╕╣ te TE do DO NaM waH W',
        consonants: `ka Ka ga Ga fa ca Ca ja Ja Fa ta Ta da Da Na
        wa Wa xa Xa na pa Pa ba Ba ma
        ya ra la va Sa Ra sa ha с╕╗a`,
        symbols: 'oM . .. 0 1 2 3 4 5 6 7 8 9',
        putra: 'puwra',
        naraIti: 'nara iwi',
        sentence: 'XarmakRewre kurukRewre samavewA yuyuwsavaH .',
    },

    [Script.TELUGU]: {
        vowels: 'р░Е р░Ж р░З р░И р░Й р░К р░Л р▒а р░М р▒б р░П р░Р р░У р░Ф',
        marks: 'р░Х р░Цр░╛ р░Чр░┐ р░Шр▒А р░Щр▒Б р░Ър▒В р░Ыр▒Г р░Ьр▒Д р░Эр▒в р░Юр▒г р░Яр▒З р░ар▒И р░бр▒Л р░вр▒М р░гр░В р░др░Г р░ер▒Н',
        consonants: `р░Х р░Ц р░Ч р░Ш р░Щ р░Ъ р░Ы р░Ь р░Э р░Ю р░Я р░а р░б р░в р░г р░д р░е р░ж р░з р░и р░к р░л р░м р░н р░о
        р░п р░░ р░▓ р░╡ р░╢ р░╖ р░╕ р░╣ р░│`,
        symbols: 'р░Ур░В ред рее р▒ж р▒з р▒и р▒й р▒к р▒л р▒м р▒н р▒о р▒п',
        putra: 'р░кр▒Бр░др▒Нр░░',
        naraIti: 'р░ир░░ р░Зр░др░┐',
        sentence: 'р░зр░░р▒Нр░ор░Хр▒Нр░╖р▒Зр░др▒Нр░░р▒З р░Хр▒Бр░░р▒Бр░Хр▒Нр░╖р▒Зр░др▒Нр░░р▒З р░╕р░ор░╡р▒Зр░др░╛ р░пр▒Бр░пр▒Бр░др▒Нр░╕р░╡р░Г ред',
    },

    [Script.GONDI_GUNJALA]: {
        vowels: 'ЁС╡а ЁС╡б ЁС╡в ЁС╡г ЁС╡д ЁС╡е р░Л р▒а р░М р▒б ЁС╡з ЁС╡и ЁС╡к ЁС╡л',
        marks: 'ЁС╡▒ ЁС╡▓ЁС╢К ЁС╡╢ЁС╢Л ЁС╡╖ЁС╢М ЁС╢ДЁС╢Н ЁС╡╗ЁС╢О ЁС╡╝р▒Г ЁС╢Ар▒Д ЁС╢Бр▒в р░Юр▒г ЁС╡╜ЁС╢Р ЁС╡╛ЁС╢С ЁС╢ВЁС╢У ЁС╢ГЁС╢Ф ЁС╡┐ЁС╢Х ЁС╡│ЁС╢Ц ЁС╡┤ЁС╢Ч',
        consonants: `ЁС╡▒ ЁС╡▓ ЁС╡╢ ЁС╡╖ ЁС╢Д ЁС╡╗ ЁС╡╝ ЁС╢А ЁС╢Б р░Ю ЁС╡╜ ЁС╡╛ ЁС╢В ЁС╢Г ЁС╡┐ ЁС╡│ ЁС╡┤ ЁС╡╕ ЁС╡╣ ЁС╡║ ЁС╢Е ЁС╢Ж ЁС╡о ЁС╡п ЁС╡░
        ЁС╡м ЁС╢И ЁС╡╡ ЁС╡н р░╢ р░╖ ЁС╢Й ЁС╢З р░│`,
        symbols: 'ЁС╢Ш ред рее ЁС╢а ЁС╢б ЁС╢в ЁС╢г ЁС╢д ЁС╢е ЁС╢ж ЁС╢з ЁС╢и ЁС╢й',
        putra: 'ЁС╢ЕЁС╢НЁС╡│ЁС╢ЧЁС╢И',
        naraIti: 'ЁС╡║ЁС╢И ЁС╡вЁС╡│ЁС╢Л',
        sentence: 'ЁС╡╣ЁС╢ИЁС╢ЧЁС╡░ЁС╡▒ЁС╢Чр░╖ЁС╢РЁС╡│ЁС╢ЧЁС╢ИЁС╢Р ЁС╡▒ЁС╢НЁС╢ИЁС╢НЁС╡▒ЁС╢Чр░╖ЁС╢РЁС╡│ЁС╢ЧЁС╢ИЁС╢Р ЁС╢ЙЁС╡░ЁС╡нЁС╢РЁС╡│ЁС╢К ЁС╡мЁС╢НЁС╡мЁС╢НЁС╡│ЁС╢ЧЁС╢ЙЁС╡нЁС╢Ц ред',
    },

};


/**
 * Compare data for `from` and `to` in the test group `group`
 * @param {string} from
 * @param {string} to
 * @param {string} group
 */
function compareGroup(from, to, group, t) {
    const source = DATA[from][group];
    const expected = s(DATA[to][group]).join(' ');
    const actual = s(lip.t({ data: source, from, to })).join(' ');
    t.equal(actual, expected, `${from} to ${to}: expected ${expected}, got ${actual}`);
}


/**
 * Compare all data for `from` and `to`
 * @param {string} from
 * @param {string} to
 */
function compareAllDataBetweenSchemes(from, to, t) {
    if (!DATA[from] || !DATA[t]) return;
    Object.keys(DATA[from]).forEach((group) => {
        if (Object.prototype.hasOwnProperty.call(DATA[to], group)) {
            compareGroup(from, to, group, t);
        }
    });
}


test('Test that a scheme is roman if `isRoman`', (t) => {
    Scripts.forEach((scriptName) => {
        t.ok(
            // @ts-ignore
            lip.registry.get(scriptName).isRoman === RomanScripts.includes(scriptName),
            `valid isRoman for script ${scriptName},`,
        );
    });
    t.end();
});


test('correspondence: Test that schemes correspond to a subset of devanagari', (t) => {
    const dev = lip.registry.get(Script.DEVANAGARI);
    const groups = new Set(Object.keys(dev.scheme));

    lip.registry.forEach((scriptDef) => {
        Object.keys(scriptDef.scheme).forEach((group) => {
            t.ok(groups.has(group), `${scriptDef.name} has group ${group}`);
        });
    });
    t.end();
});


test('to roman: Test roman to roman', (t) => {
    RomanScripts.forEach((from) => {
        RomanScripts.forEach((to) => {
            t.test(`roman to roman: ${from}:${to}`, (st) => {
                compareAllDataBetweenSchemes(from, to, st);
                st.end();
            });
        });
    });
    t.end();
});


test('to brahmic: Test roman to brahmic', (t) => {
    RomanScripts.forEach((from) => {
        BrahmicScripts.forEach((to) => {
            t.test(`roman to brahmic: ${from}:${to}`, (st) => {
                compareAllDataBetweenSchemes(from, to, st);
                st.end();
            });
        });
    });
    t.end();
});


test('devanagari equivalence: Test all synonomous transliterations', (t) => {
    t.equals(
        lip.t({
            data: 'rAmo gUDhaM vaktI~Ngitaj~naH kShetre',
            from: Script.ITRANS,
            to: Script.DEVANAGARI,
        }),
        lip.t({
            data: 'raamo guuDhaM vaktii~NgitaGYaH xetre',
            from: Script.ITRANS,
            to: Script.DEVANAGARI,
        }),
    );
    t.end();
});


test('Test brahmic to roman', (t) => {
    RomanScripts.forEach((to) => {
        compareAllDataBetweenSchemes(Script.DEVANAGARI, to, t);
    });
    t.end();
});


test('Test brahmic to brahmic', (t) => {
    BrahmicScripts.forEach((to) => {
        compareAllDataBetweenSchemes(Script.DEVANAGARI, to, t);
    });
    t.end();
});


test('Test vowel to mark map', (t) => {
    BrahmicScripts.forEach((script) => {
        if ([BrahmicScript.PERSIAN_OLD, BrahmicScript.CHAM, BrahmicScript.TAKRI, BrahmicScript.MAHAJANI, BrahmicScript.MULTANI, BrahmicScript.SYLOTI_NAGARI].includes(script)) {
            // These scripts are exceptional here as they have same char for different vowels, and are not candidates for this test
            return;
        }
        t.test(`vowel to mark map: ${script}`, (st) => {
            const scriptDef = lip.registry.get(script);
            st.equals(
                // @ts-ignore
                scriptDef.vowelToMarkMap[lip.t({ data: 'рдЕ', from: Script.DEVANAGARI, to: script })],
                '',
            );

            st.equals(
                // @ts-ignore
                scriptDef.vowelToMarkMap[lip.t({ data: 'рдЖ', from: Script.DEVANAGARI, to: script })],
                lip.t({ data: 'рд╛', from: Script.DEVANAGARI, to: script }),
            );

            const dev = lip.registry.get(Script.DEVANAGARI);

            s('рдЗ рдИ рдЙ рдК рдП рдР рдУ рдФ').forEach((vowel) => {
                st.equals(
                    // @ts-ignore
                    scriptDef.vowelToMarkMap[lip.t({ data: vowel, from: Script.DEVANAGARI, to: script })],
                    // @ts-ignore
                    lip.t({ data: dev.vowelToMarkMap[vowel], from: Script.DEVANAGARI, to: script }),
                    `marks-test:- script:${script}, dev-vowel: ${vowel}`,
                );
            });

            st.end();
        });
    });
    t.end();
});


function toggleTestHelper(from, to, t) {
    return (data, output) => {
        t.equals(
            output,
            lip.t({ data, from, to }),
        );
    };
}


test('Test toggle', (t) => {
    const f = toggleTestHelper(Script.HK, Script.DEVANAGARI, t);
    f('akSa##kSa##ra', 'рдЕрдХреНрд╖kSaрд░');
    f('##akSa##kSa##ra', 'akSaрдХреНрд╖ra');
    f('akSa##ra##', 'рдЕрдХреНрд╖ra');
    f('akSa##ra', 'рдЕрдХреНрд╖ra');
    f('akSa##kSa##ra####', 'рдЕрдХреНрд╖kSaрд░');
    f('a####kSara', 'рдЕрдХреНрд╖рд░');
    f('a#kSara', 'рдЕ#рдХреНрд╖рд░');
    t.end();
});


test('Test suspend', (t) => {
    const f = toggleTestHelper(Script.HK, Script.DEVANAGARI, t);
    f('<p>nara iti</p>', '<p>рдирд░ рдЗрддрд┐</p>');
    t.end();
});


test('Test suspend and toggle', (t) => {
    const f = toggleTestHelper(Script.HK, Script.DEVANAGARI, t);
    f('<p>##na##ra## iti</p>', '<p>naрд░ iti</p>');
    t.end();
});
